{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This framework was developed using and was intended for Roblox Studio.  This framework has been created by Anonymous Creations, and access to this information shall be strictly limited to individuals engaged in collaboration or employment with Anonymous Creations.</p> <p>Resources:</p> <ul> <li>For reference: API</li> <li>For new users: Best Practices</li> </ul> <p>Created by Anonymous Creations</p>"},{"location":"API/","title":"API","text":"<p>This serves as the API for the framework. Within this page, a comprehensive compilation of all modules within the framework shall be presented, accompanied by examples showcasing their functionality.</p> <p>Notice</p> <p>The structure of this API has been designed to facilitate clear visibility of parameters alongside their respective types. As is customary with most APIs, you will encounter a type designation, such as \"Vector3,\" followed by the corresponding variable name. For instance, \"Vector3 Position\" where \"Vector3\" represents the type and \"Position\" serves as the variable name.</p> <p>The return type is also shown outside of the function name and separated using a |.</p>","boost":10},{"location":"API/#client-modules","title":"Client Modules","text":"","boost":10},{"location":"API/#gui","title":"GUI","text":"<pre><code>Library.GUI\n</code></pre> <p>Notice</p> <p>This module is only accessible on the client. Please be aware of this before using it.</p> <p>Returns every GuiObject in the game. This allows for easy access to all UI elements.</p> <p>Application <pre><code>---- Library\nlocal Library = require(game.ReplicatedStorage:WaitForChild(\"Framework\"):WaitForChild(\"Library\"))\nwhile (not Library.Loaded) do  game:GetService(\"RunService\").Heartbeat:Wait() end\n\nlocal GUI = Library.GUI\nlocal Main = GUI.Main\nlocal Coins = Main.LeftHolder.Coins\n</code></pre></p>","boost":10},{"location":"API/#guifx","title":"GUIFX","text":"<pre><code>Library.GUIFX\n</code></pre> <p>Notice</p> <p>This module is only accessible on the client. Please be aware of this before using it.</p> <p>Returns all GUIFX modules.</p>","boost":10},{"location":"API/#buttonfx","title":"ButtonFX()","text":"<p><pre><code>Library.GUIFX.ButtonFX(GuiButton Button) | void\n</code></pre> Creates an animation for buttons on MouseEnter, Leave, Button1Down, and Button1Up.</p>","boost":10},{"location":"API/#friends","title":"Friends","text":"<pre><code>Library.Friends\n</code></pre> <p>Notice</p> <p>This module is only accessible on the client. Please be aware of this before using it.</p> <p>Contains all the functions for friends.</p>","boost":10},{"location":"API/#getnumberoffriendsingame","title":"GetNumberOfFriendsInGame()","text":"<p><pre><code>Library.Friends.GetNumberOfFriendsInGame() | number\n</code></pre> Returns how many of the local players friends that are currently in their server.</p>","boost":10},{"location":"API/#getrandomfriend","title":"GetRandomFriend()","text":"<p><pre><code>Library.Friends.GetRandomFriend() | number\n</code></pre> Returns a random <code>UserId</code> from the local players friend list. Returns their <code>UserId</code> of they have no friends.</p>","boost":10},{"location":"API/#interactions","title":"Interactions","text":"<pre><code>Library.Interactions\n</code></pre> <p>Notice</p> <p>This module is only accessible on the client. Please be aware of this before using it.</p> <p>Contains all the functions for interactions. Specifically, an interaction refers to a client-side, custom proximity prompt GUI,  designed to allow for simple and efficient setup.</p>","boost":10},{"location":"API/#interact","title":"Interact()","text":"<p><pre><code>Library.Interactions.Interact(Instance Target, Vector3 Position) | RBXScriptSignal\n</code></pre> Creates a new interaction and returns an event to detect input.</p> <p>Application <pre><code>---- Library\nlocal Library = require(game.ReplicatedStorage:WaitForChild(\"Framework\"):WaitForChild(\"Library\"))\nwhile (not Library.Loaded) do  game:GetService(\"RunService\").Heartbeat:Wait() end\n\nlocal function OnInteraction()\n    print(\"Interaction\")\nend\n\nlocal Interaction = Library.Interactions.Interact(InteractPart, 20)\n\nInteraction:Connect(OnInteraction)\n</code></pre></p>","boost":10},{"location":"API/#proximity","title":"Proximity","text":"<pre><code>Library.Proximity\n</code></pre> <p>Notice</p> <p>This module is only accessible on the client. Please be aware of this before using it.</p>","boost":10},{"location":"API/#proximitynew","title":"Proximity.New()","text":"<p><pre><code>Library.Proximity.New(Instance Target, Vector3 Position, BillboardGui ProximityUI) | void\n</code></pre> Creates a new proximity UI on the target.</p>","boost":10},{"location":"API/#isinrange","title":"IsInRange()","text":"<p><pre><code>Library.Proximity.IsInRange(Instance Target, number MaxDistance) | bool\n</code></pre> Returns if the local character is in range of the target.</p>","boost":10},{"location":"API/#server-modules","title":"Server Modules","text":"","boost":10},{"location":"API/#userdata","title":"UserData","text":"<pre><code>Library.UserData\n</code></pre> <p>Warning</p> <p>This module is not meant to be modified or read through scripts. If you are trying to get the player's data, please use the <code>DataSystem</code> instead.</p> <p>Notice</p> <p>This module is only accessible on the server. Please be aware of this before using it.</p> <p>A module that holds all of the user data that is stored in <code>DataStores</code>.</p>","boost":10},{"location":"API/#datasystem","title":"DataSystem","text":"<pre><code>Library.DataSystem\n</code></pre> <p>Notice</p> <p>This module is only accessible on the server. Please be aware of this before using it.</p> <p>The <code>DataSystem</code> handles all game data and contains all of the functions needed to manipulate and track player data.</p>","boost":10},{"location":"API/#getdataasync","title":"GetDataAsync()","text":"<pre><code>Library.DataSystem.GetDataAsync(Player DataPlayer) | Dictionary\n</code></pre> <p>Notice</p> <p>This module is only accessible on the server. Please be aware of this before using it.</p> <p>This Function Yields</p> <p>Take into consideration that this function can yield. It is encouraged to ensure that your code accommodates this behavior when using the function.</p> <p>Loads and returns all player data. This function can yield up to 30 seconds. If data loading fails at any point, it will kick the player from the server to prevent data loss.</p> <p>This function should only be run once per script if possible to reduce script yielding. See an example below of how to do this.</p> <p>Application <pre><code>---- Library\nlocal Library = require(game.ReplicatedStorage:WaitForChild(\"Framework\"):WaitForChild(\"Library\"))\nwhile (not Library.Loaded) do  game:GetService(\"RunService\").Heartbeat:Wait() end\n\n---- Framework Modules\nlocal DataSystem = Library.DataSystem\nlocal Network = Library.Network\n\n---- Variables\nlocal PlayerData = {}\n\n---- Functions\nlocal function ReturnData(Player)\n    local Data = PlayerData[Player] or DataSystem.GetDataAsync(Player)\n    if not Data then warn(\"Cannot find data for \" .. tostring(Player)); return false end\n\n    return Data\nend\n\n---- Handle player joining\nlocal function OnPlayerAdded(Player)\n    if not PlayerData[Player] then\n        local success, err = pcall(function()\n            PlayerData[Player] = DataSystem.GetDataAsync(Player)\n        end)\n\n        if not success then return warn(tostring(err)) end\n    end\nend\n\n---- Handle player leaving\nlocal function OnPlayerRemoving(Player)\n    if not PlayerData[Player] then return end\n    PlayerData[Player] = nil\nend\n\n---- Signals\nLibrary.PlayerAdded:Connect(OnPlayerAdded)\nLibrary.PlayerRemoving:Connect(OnPlayerAdded)\n\nNetwork:BindFunctions({\n    ---- Handle clients requesting data\n    GetData = ReturnData\n})\n</code></pre> The code shown uses caching to solve the yielding issue. Whenever a player joins, their data is fetched and stored in a dictionary for future use. Consequently, instead of repetitively using <code>GetDataAsync</code> whenever data is requested, the script efficiently retrieves it from the dictionary instead. This method allows for high performance lookups of the player data and is recommended whenever dealing with a players data.</p>","boost":10},{"location":"API/#dataloaded","title":"DataLoaded()","text":"<pre><code>Library.DataSystem.DataLoaded(Player DataPlayer) | bool\n</code></pre> <p>Notice</p> <p>This module is only accessible on the server. Please be aware of this before using it.</p> <p>Returns if the player data has been loaded on a specific player.</p>","boost":10},{"location":"API/#deletedataasync","title":"DeleteDataAsync()","text":"<pre><code>Library.DataSystem.DeleteDataAsync(Player DataPlayer) | void\n</code></pre> <p>Notice</p> <p>This module is only accessible on the server. Please be aware of this before using it.</p> <p>This Function Yields</p> <p>Take into consideration that this function can yield. It is encouraged to ensure that your code accommodates this behavior when using the function.</p> <p>Deletes all game data for a specific player. This is not a reversable process so make sure that when this function is used, it is tested thoroughly to make sure it has been implemented correctly.</p>","boost":10},{"location":"API/#badges","title":"Badges","text":"<pre><code>Library.Badges\n</code></pre> <p>Notice</p> <p>This module is only accessible on the server. Please be aware of this before using it.</p> <p>This module contains and returns all of the functions related to badges.</p>","boost":10},{"location":"API/#give","title":"Give","text":"<pre><code>Library.Badges.Give(Player AwardedPlayer, BadgeID)\n</code></pre> <p>Notice</p> <p>This module is only accessible on the server. Please be aware of this before using it.</p> <p>Awards a badge to the player.</p>","boost":10},{"location":"API/#boosts","title":"Boosts","text":"<pre><code>Library.Boosts\n</code></pre> <p>Notice</p> <p>This module is only accessible on the server. Please be aware of this before using it.</p> <p>This module contains and returns all of the functions related to player boosts.</p>","boost":10},{"location":"API/#getboost","title":"GetBoost","text":"<pre><code>Library.Boosts.GetBoost(Player BoostedPlayer, string BoostName, PlayerData Data) | bool\n</code></pre> <p>Notice</p> <p>This module is only accessible on the server. Please be aware of this before using it.</p> <p>This Function Yields</p> <p>Take into consideration that this function can yield. It is encouraged to ensure that your code accommodates this behavior when using the function.</p> <p>Checks and returns if a given boost is active for a specific player. Data is an optional parameter however if not added, this function can yield.</p>","boost":10},{"location":"API/#useboost","title":"UseBoost","text":"<pre><code>Library.Boosts.UseBoost(Player BoostedPlayer, string BoostName, number BoostTime, PlayerData Data) | bool\n</code></pre> <p>Notice</p> <p>This module is only accessible on the server. Please be aware of this before using it.</p> <p>This Function Yields</p> <p>Take into consideration that this function can yield. It is encouraged to ensure that your code accommodates this behavior when using the function.</p> <p>Uses a boost for a specific player if they own more than 0. Returns true or false depending on if the boost was used or not. Data is an optional parameter however if not added, this function can yield.</p>","boost":10},{"location":"API/#addboost","title":"AddBoost","text":"<pre><code>Library.Boosts.AddBoost(Player BoostedPlayer, string BoostName, number Amount, PlayerData Data) | bool\n</code></pre> <p>Notice</p> <p>This module is only accessible on the server. Please be aware of this before using it.</p> <p>This Function Yields</p> <p>Take into consideration that this function can yield. It is encouraged to ensure that your code accommodates this behavior when using the function.</p> <p>Adds a boost to a specific players inventory. Returns true or false depending on if the boost was added or not. Data is an optional parameter however if not added, this function can yield.</p>","boost":10},{"location":"API/#shared-modules","title":"Shared Modules","text":"","boost":10},{"location":"API/#index","title":"Index","text":"<p><pre><code>Library.Index\n</code></pre> The Index module serves as a container module for different data modules (different from the <code>DataSystem</code>).</p> <p>Application <pre><code>---- Library\nlocal Library = require(game.ReplicatedStorage:WaitForChild(\"Framework\"):WaitForChild(\"Library\"))\nwhile (not Library.Loaded) do  game:GetService(\"RunService\").Heartbeat:Wait() end\n\nlocal Index = Library.Index\nlocal DataModuleName = Index.DataModuleName\n</code></pre></p>","boost":10},{"location":"API/#shared","title":"Shared","text":"<p><pre><code>Library.Shared\n</code></pre> The Shared module holds most general game data and stats. For example, currencies, Settings, Codes, etc...</p> <p>Application <pre><code>---- Library\nlocal Library = require(game.ReplicatedStorage:WaitForChild(\"Framework\"):WaitForChild(\"Library\"))\nwhile (not Library.Loaded) do  game:GetService(\"RunService\").Heartbeat:Wait() end\n\nlocal Currencies = Library.Shared.Currencies\n</code></pre></p>","boost":10},{"location":"API/#variables","title":"Variables","text":"<p><pre><code>Library.Variables\n</code></pre> The Variables module holds all public variables for a game. Some are only accessible through the client or server.</p> <p>Application <pre><code>---- Library\nlocal Library = require(game.ReplicatedStorage:WaitForChild(\"Framework\"):WaitForChild(\"Library\"))\nwhile (not Library.Loaded) do  game:GetService(\"RunService\").Heartbeat:Wait() end\n\nlocal Variables = Library.Variables\nlocal Version = Variables.Version\n\nprint(Version) -&gt; \"1.0.0a\"\n</code></pre></p>","boost":10},{"location":"API/#player","title":"Player","text":"<p><pre><code>Library.Player\n</code></pre> The player module contains and returns all the functions for the player.</p>","boost":10},{"location":"API/#get","title":"Get","text":"<p><pre><code>Library.Player.Get(string Object, Player GetPlayer) | Variant\n</code></pre> Returns an object from the player. Object name is not case sensitive. Objects supported:</p> <ul> <li>Player</li> <li>Character</li> <li>RootPart</li> <li>Torso</li> <li>Humanoid</li> <li>PlayerGui</li> <li>StarterPlayer</li> <li>Backpack</li> <li>Camera</li> <li>Name</li> </ul> <p>Application <pre><code>---- Library\nlocal Library = require(game.ReplicatedStorage:WaitForChild(\"Framework\"):WaitForChild(\"Library\"))\nwhile (not Library.Loaded) do  game:GetService(\"RunService\").Heartbeat:Wait() end\n\n---- Framework Modules\nlocal PlayerModule = Library.Player\n\n---- Variables\nlocal Player = Library.Players.LocalPlayer\nlocal Character = PlayerModule.Get(\"Character\", Player)\nlocal Humanoid = PlayerModule.Get(\"RootPart\", Player)\n</code></pre></p>","boost":10},{"location":"API/#network","title":"Network","text":"<pre><code>Library.Network\n</code></pre> <p>Notice</p> <p>This module was created by a 3rd party and may not be given the same documentation from Anonymous Creations.</p> <p>A networking module to improve client-server and server-client communication. This is a 3rd party module. To learn more about it, please use the API within the module.</p>","boost":10},{"location":"API/#functions","title":"Functions","text":"","boost":10},{"location":"API/#general","title":"General","text":"","boost":10},{"location":"API/#animation","title":"Animation()","text":"<p><pre><code>Library.Functions.Animation(ID, Humanoid) | AnimationTrack\n</code></pre> Plays and animation on a humanoid and returns the AnimationTrack.</p>","boost":10},{"location":"API/#createparticle","title":"CreateParticle()","text":"<p><pre><code>Library.Functions.CreateParticle(Vector3 Position) | Part, Attachment\n</code></pre> PLACEHOLDER TEXT.</p>","boost":10},{"location":"API/#generatename","title":"GenerateName()","text":"<p><pre><code>Library.Functions.GenerateName() | string\n</code></pre> Returns a random pet name.</p>","boost":10},{"location":"API/#loop","title":"Loop()","text":"<p><pre><code>Library.Functions.Loop(number Cooldown, string RunType, function Function) | RBXScriptConnection\n</code></pre> Creates a loop that a function can run in until broken.</p> <p>Application <pre><code>---- Library\nlocal Library = require(game.ReplicatedStorage:WaitForChild(\"Framework\"):WaitForChild(\"Library\"))\nwhile (not Library.Loaded) do  game:GetService(\"RunService\").Heartbeat:Wait() end\n\nlocal Loop\n\ntask.spawn(function()\n    Loop = Library.Functions.Loop(1, \"Heartbeat\", function()\n        print(\"One second has passed\")\n    end)\nend)\n\n---- Code\n\nLoop:Disconnect()\n</code></pre></p>","boost":10},{"location":"API/#scrollingresize","title":"ScrollingResize()","text":"<p><pre><code>Library.Functions.ScrollingResize(ScrollingFrame Frame, number CellSize)\n</code></pre> Resizes a scrolling from to make sure that every cell is visible.</p>","boost":10},{"location":"API/#table","title":"Table()","text":"<p><pre><code>Library.Functions.Table(Table Array, Variant Value, string Action) | Variant\n</code></pre> Performs an action on a table. Supported actions:</p> <ul> <li>Insert (Inserts a value in the table)</li> <li>Find (Returns the index of the value in a table)</li> <li>Remove (Removes a value in a table)</li> </ul> <p>Application <pre><code>---- Library\nlocal Library = require(game.ReplicatedStorage:WaitForChild(\"Framework\"):WaitForChild(\"Library\"))\nwhile (not Library.Loaded) do  game:GetService(\"RunService\").Heartbeat:Wait() end\n\nlocal Array = {}\n\nLibrary.Functions.Table(Array, 1, \"Insert\")\nLibrary.Functions.Table(Array, \"Two\", \"Insert\")\nLibrary.Functions.Table(Array, 3, \"Insert\")\n\nprint(unpack(Array)) -&gt; 1 \"Two\" 3\n\nprint(Library.Functions.Table(Array, \"Two\", \"Find\")) -&gt; 2\n\nLibrary.Functions.Table(Array, \"Two\", \"Remove\")\n\nprint(unpack(Array)) -&gt; 1 3\n</code></pre></p>","boost":10},{"location":"API/#tween","title":"Tween()","text":"<p><pre><code>Library.Functions.Tween(Instance Object, Table Properties, Table TweenInfo) | Tween\n</code></pre> Creates, plays, and returns a tween on an object.</p> <p>Application <pre><code>---- Library\nlocal Library = require(game.ReplicatedStorage:WaitForChild(\"Framework\"):WaitForChild(\"Library\"))\nwhile (not Library.Loaded) do  game:GetService(\"RunService\").Heartbeat:Wait() end\n\nlocal Part = Library.GameDebris.Part\n\nlocal PartTween = Library.Functions.Tween(Part, {Position = Vector3.new(10, 4, 30)}, {0.065, \"Exponential\", \"Out\"})\n</code></pre></p>","boost":10},{"location":"API/#audio","title":"Audio","text":"","boost":10},{"location":"API/#playsound","title":"PlaySound()","text":"<p><pre><code>Library.Functions.PlaySound(string SoundName, int Plays, int Cooldown, number Volume, Vector3 Position)\n</code></pre> Plays a sound. Note the only required parameter is the sound name.</p>","boost":10},{"location":"API/#loopsound","title":"LoopSound()","text":"<p><pre><code>Library.Functions.LoopSound(string SoundName, number Volume)\n</code></pre> Plays a sound on a loop unless stopped otherwise.</p>","boost":10},{"location":"API/#stopsound","title":"StopSound()","text":"<p><pre><code>Library.Functions.StopSound(string SoundName) | void\n</code></pre> Stops a sound that's being played.</p> <p>Application <pre><code>---- Library\nlocal Library = require(game.ReplicatedStorage:WaitForChild(\"Framework\"):WaitForChild(\"Library\"))\nwhile (not Library.Loaded) do  game:GetService(\"RunService\").Heartbeat:Wait() end\n\nLibrary.Functions.LoopSound(\"Music1\", 0.5)\n\ntask.wait(99)\n\nLibrary.Functions.StopSound(\"Music1\") ---- Stops the sound\n</code></pre></p>","boost":10},{"location":"API/#formatters","title":"Formatters","text":"","boost":10},{"location":"API/#abbreviation","title":"Abbreviation()","text":"<p><pre><code>Library.Functions.Abbreviation(number Value) | string\n</code></pre> Takes a numerical input and returns a number as a string with as an abbreviation: 1K 10K 100K...</p>","boost":10},{"location":"API/#commas","title":"Commas()","text":"<p><pre><code>Library.Functions.Commas(number Value) | string\n</code></pre> Takes a numerical input and returns a formatted string of the number with commas added as thousands separators.</p>","boost":10},{"location":"API/#formatminutes","title":"FormatMinutes()","text":"<p><pre><code>Library.Functions.FormatMinutes(number Value) | string\n</code></pre> Takes a numerical input and returns a formatted string of the number as a timer: hh:mm.</p>","boost":10},{"location":"API/#formatseconds","title":"FormatSeconds()","text":"<p><pre><code>Library.Functions.FormatSeconds(number Value) | string\n</code></pre> Takes a numerical input and returns a formatted string of the number as a timer: hh:mm:ss</p>","boost":10},{"location":"API/#math","title":"Math","text":"","boost":10},{"location":"API/#cubicbezier","title":"CubicBezier()","text":"<p><pre><code>Library.Functions.CubicBezier(Vector3 Pos1, Vector3 Pos2, Vector3 Pos3, Vector3 Pos4, number Time) | Vector3\n</code></pre> Returns a cubic Bezier curve.</p>","boost":10},{"location":"API/#quadbezier","title":"QuadBezier()","text":"<p><pre><code>Library.Functions.QuadBezier(Vector3 Pos1, Vector3 Pos2, Vector3 Pos3, number Time) | Vector3\n</code></pre> Returns a quad Bezier curve.</p>","boost":10},{"location":"API/#inverselerp","title":"InverseLerp()","text":"<p><pre><code>Library.Functions.InverseLerp(Input1, Input2, Value) | Vector3 or number\n</code></pre> Returns the inverse lerp of the inputs (Solves for time). Input1 and Input2 can be a number or a Vector3 as long as both are the same type. Value has to be the same type as the Inputs.</p>","boost":10},{"location":"API/#lerp","title":"Lerp()","text":"<p><pre><code>Library.Functions.Lerp(Input1, Input2, number Time) | Vector3 or number\n</code></pre> Returns the linear interpolation of the inputs. Input1 and Input2 can be a number or a Vector3 as long as both are the same type.</p>","boost":10},{"location":"API/#random","title":"Random()","text":"<p><pre><code>Library.Functions.Random(number Min, number Max, bool Rounded, number Seed) | number\n</code></pre> Returns a random number within a given range. Rounded determines if the number will round to the nearest integer. Both Rounded and Seed are optional.</p>","boost":10},{"location":"API/#playerverification","title":"PlayerVerification","text":"","boost":10},{"location":"API/#getplatform","title":"GetPlatform()","text":"<p><pre><code>Library.Functions.GetPlatform(Player CheckPlayer) | string\n</code></pre> Returns the platform the player is using.</p> <ul> <li>Mobile</li> <li>Console</li> <li>Computer</li> </ul>","boost":10},{"location":"API/#isingroup","title":"IsInGroup()","text":"<p><pre><code>Library.Functions.IsInGroup(Player CheckPlayer) | bool\n</code></pre> Returns if the player is in the group Anonymous Creations.</p>","boost":10},{"location":"API/#isverified","title":"IsVerified()","text":"<p><pre><code>Library.Functions.IsVerified(Player CheckPlayer) | bool\n</code></pre> Returns if the player is ID or phone verified.</p>","boost":10},{"location":"API/#premium","title":"Premium()","text":"<p><pre><code>Library.Functions.Premium(Player CheckPlayer) | bool\n</code></pre> Returns if the player has a premium subscription.</p>","boost":10},{"location":"API/#policies","title":"Policies","text":"","boost":10},{"location":"API/#canseeads","title":"CanSeeAds()","text":"<p><pre><code>Library.Functions.CanSeeAds(Player CheckPlayer) | bool\n</code></pre> Returns if the player can see advertisements in game.</p>","boost":10},{"location":"API/#cantrade","title":"CanTrade()","text":"<p><pre><code>Library.Functions.CanTrade(Player CheckPlayer) | bool\n</code></pre> Returns if the player has access to trading in game.</p>","boost":10},{"location":"API/#canviewlinks","title":"CanViewLinks()","text":"<p><pre><code>Library.Functions.CanViewLinks(Player CheckPlayer) | bool\n</code></pre> Returns if the player can view links in game.</p>","boost":10},{"location":"API/#hasaccesstorandomitems","title":"HasAccessToRandomItems()","text":"<p><pre><code>Library.Functions.HasAccessToRandomItems(Player CheckPlayer) | bool\n</code></pre> Returns if the player has access to paid random items in game.</p>","boost":10},{"location":"API/#data","title":"Data","text":"","boost":10},{"location":"API/#error-list","title":"Error List","text":"Code Reason <code>101</code> Module failed to load","boost":10},{"location":"Best%20Practices/","title":"Best Practices","text":"<p>In order to ensure the optimal integration of a newly created script into the framework, we kindly request adhering to the prescribed best practices outlined here. By following this established approach, a seamless incorporation can be achieved.</p>"},{"location":"Best%20Practices/#requiring-the-library","title":"Requiring the Library","text":"<p>New scripts, depending on type should require the Library module in two separate ways.</p> <ol> <li>If your script is either a LocalScript, regular Script or is a ModuleScript that isn't required by the Library module</li> </ol> <pre><code>---- Library\nlocal Library = require(game.ReplicatedStorage:WaitForChild(\"Framework\"):WaitForChild(\"Library\"))\nwhile (not Library.Loaded) do  game:GetService(\"RunService\").Heartbeat:Wait() end\n</code></pre> <ol> <li>If your script is a ModuleScript and is going to be required by the Library module</li> </ol> <pre><code>---- Library\nlocal Library task.spawn(function()  Library = require(game.ReplicatedStorage:WaitForChild(\"Framework\"):WaitForChild(\"Library\")) end)\n</code></pre> <p>The initial approach will yield until all modules have been loaded to prevent scripts from indexing unloaded modules (which would throw an attempt to index nil error). The second approach streamlines the inclusion of the Library module by eliminating the need to load all modules before executing the script's code. It is required to employ the second method when making additions to the core framework. In such cases, it also required to ensure strict adherence to the naming format to guarantee seamless integration.</p> Naming <p>When developing a new module for the core framework, it is required to incorporate a priority number preceding the module name. For instance, if the module is named 'HelloWorld', it could be designated as '3 - HelloWorld'. The assigned priority number determines the sequence in which modules are loaded, with 1 denoting the initial module and 9 indicating the final module. It is crucial to assign a number lower than the modules it depends on, as the Library module systematically loads modules in accordance with their designated priority.</p>"},{"location":"Best%20Practices/#script-structure","title":"Script Structure","text":"<p>Adherence to the structure shown below is strongly recommended for every script created.</p> <ol> <li>Library</li> <li>Framework and Service Variables</li> <li>Variables</li> <li>Signals</li> <li>Loops</li> </ol> <p>For example: <pre><code>---- Library\nlocal Library = require(game.ReplicatedStorage:WaitForChild(\"Framework\"):WaitForChild(\"Library\"))\nwhile (not Library.Loaded) do  game:GetService(\"RunService\").Heartbeat:Wait() end\n\n---- Framework Modules\n\n---- Variables\n\n---- Functions\n\n---- Signals\n\n---- Loops\n</code></pre></p>"},{"location":"Best%20Practices/#basic-styling","title":"Basic Styling","text":"<p>To maintain uniform structure and style across all scripts and ensure seamless integration of new features into our games, it is recommended to observe the following styling guidelines during the implementation process:</p>"},{"location":"Best%20Practices/#gaurd-statements","title":"Gaurd Statements","text":"<p>A guard statement is a check that immediately exists a function and avoids lots of code nesting (indentations).</p> <p>DON'T DO: <pre><code>local Library = require(game.ReplicatedStorage:WaitForChild(\"Framework\"):WaitForChild(\"Library\"))\nwhile (not Library.Loaded) do  game:GetService(\"RunService\").Heartbeat:Wait() end\n\nfor i = 0, 10, 1 do\n    if (i%2) == 0 then\n        print(tostring(i))\n    end\nend\n</code></pre></p> <p>DO: <pre><code>local Library = require(game.ReplicatedStorage:WaitForChild(\"Framework\"):WaitForChild(\"Library\"))\nwhile (not Library.Loaded) do  game:GetService(\"RunService\").Heartbeat:Wait() end\n\n---- Make the if statement return the opposite value and use a continue statement to skip that iteration\nfor i = 0, 10, 1 do\n    if (i%2) ~= 0 then continue end\n\n    print(tostring(i))\nend\n</code></pre></p>"},{"location":"Best%20Practices/#variables","title":"Variables","text":"<p>Variable are very important for long term ease of use. Reading code with cryptic variable names can cause issues and confusion. To prevent this, please follow the variable guidelines we have:</p> <ol> <li>Make your variable names easy to understand - NO lib, vecX1 or cfrm3</li> <li>Maintain a short name when possible without adding confusion</li> <li>Use Pascalcase when naming variables in most cases</li> </ol>"},{"location":"Best%20Practices/#pairs-vs-ipairs","title":"Pairs vs Ipairs","text":"<p>In general, only use pairs() if you need to (such as iterating through dictionaries). Pairs will not loop in any specific order and can sometimes return nil depending on the array which adds an extra check.</p> <p>For example:</p> <pre><code>---- BAD\nlocal Table = {...}\nfor i, v in pairs(Table) do\n    if not v then continue end\n\n    print(v)\nend\n\n---- OKAY\nlocal Table = {...}\nfor i, v in ipairs(Table) do\n    print(v)\nend\n\n---- OKAY\nlocal Table = {\n    [\"Index1\"] = Value1\n    ...\n}\n\nfor i, v in pairs(Table) do\n    if not v then continue end\n\n    print(i, v)\nend\n</code></pre>"},{"location":"Best%20Practices/#commenting","title":"Commenting","text":"<p>Comments are an essential part of making your code as readable as possible. When implementing a feature, make sure to comment blocks of code to make it as easy to understand as possible. That way, others can quickly see what's going and anyone can fix any bugs if needed easily.</p> <p>When commenting, please use this format: <pre><code>---- This is a comment\n</code></pre></p>"},{"location":"Best%20Practices/#reusability","title":"Reusability","text":"<p>Anonymous Creations likes to implement features and release games quickly. To ensure this can happen, make sure every feature you implement is as easy to use, versatile, and reusable as possible. If this means making a module in the core framework to handle your feature, you should do it. Spending the extra time to make something that can be used in the next game is always worth it. </p> <p>It should also be noted that most basic things are covered by this framework. You should always make sure you are using as much as is provided to you through the Library module and therefore the framework. If you aren't sure if something has been added to the framework, you can look at the API or ask us.</p>"},{"location":"Best%20Practices/#client-server-structure","title":"Client -&gt; Server Structure","text":"<p>The basic structure we like to achieve is design our games around modules that can be reused in future projects. Under ideal circumstances, your code would follow this structure:</p> <pre><code>graph LR\n  A[Client] --&gt;|Signal| B{Server Event};\n  B --&gt; C[Module];\n  C --&gt; D{Module Function};</code></pre> <p>The idea is to have all server side functions within modules that can be reused instead of large scripts.</p>"},{"location":"Quick%20Guide/","title":"Quick Guide","text":""}]}